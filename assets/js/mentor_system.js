// assets/js/mentor_system.js
window.MentorSystem = (function () {

  const mentors = {
    lin: {
      name: "Lin",
      icon: "ðŸŽ©ðŸ‡¬ðŸ‡§",
      tone: "formal-friendly",
      intro: [
        "Â¡Hola! Soy Lin ðŸŽ© y hoy aprenderÃ¡s vocabulario tÃ©cnico bÃ¡sico en inglÃ©s.",
        "Recuerda: los programadores tambiÃ©n piensan en inglÃ©s.",
        "Â¡Veamos algunos ejemplos antes de comenzar!"
      ],
      aiResponses: {
        "variable": "Â¡Muy bien! Variable se traduce igual: â€˜variableâ€™. Se usa igual en programaciÃ³n.",
        "loop": "Correcto, â€˜loopâ€™ es un bucle, una estructura que repite acciones.",
        "function": "Excelente, â€˜functionâ€™ agrupa instrucciones reutilizables.",
        "boolean": "Exacto, â€˜booleanâ€™ significa verdadero o falso.",
        "if": "Â¡Bien! â€˜Ifâ€™ significa â€˜siâ€™ en inglÃ©s condicional."
      }
    },

    coder: {
      name: "Coder",
      icon: "ðŸ§¢ðŸ’»",
      tone: "enthusiastic",
      intro: [
        "Â¡Hey, soy Coder! ðŸ§¢ðŸ’» Hoy aprenderÃ¡s los fundamentos de la programaciÃ³n.",
        "Todo programa empieza con una idea, pero necesita orden, lÃ³gica y estructura.",
        "Vamos a explorar los conceptos bÃ¡sicos con ejemplos simples. Â¡Listo!"
      ],
      aiResponses: {
        "variable": "Una variable guarda un valor. Piensa en ella como una caja con nombre.",
        "loop": "Un â€˜loopâ€™ repite una acciÃ³n hasta que dejes de necesitarlo. Â¡Muy Ãºtil!",
        "function": "Una funciÃ³n agrupa cÃ³digo para reutilizarlo, Â¡como una receta!",
        "boolean": "â€˜Booleanâ€™ solo puede ser verdadero o falso. Es el alma de la lÃ³gica.",
        "if": "â€˜Ifâ€™ significa â€˜siâ€™. Permite que el programa tome decisiones."
      }
    }
  };

  let activeMentor = "lin";

  function setMentor(name) {
    if (mentors[name]) activeMentor = name;
  }

  function getIntro() {
    return mentors[activeMentor].intro;
  }

  function respondToAnswer(answer) {
    const lower = answer.toLowerCase().trim();
    return mentors[activeMentor].aiResponses[lower] ||
      "Hmm... no estoy seguro de eso. Revisa el concepto e intÃ©ntalo de nuevo.";
  }

  function showMentorMessage(message, type = "normal") {
    const container = document.getElementById("mentor-dialogue");
    if (!container) return;
    const bubble = document.createElement("div");
    bubble.className = `mentor-bubble ${type}`;
    bubble.innerHTML = `${mentors[activeMentor].icon} ${message}`;
    container.appendChild(bubble);
    container.scrollTop = container.scrollHeight;
  }

  return { setMentor, getIntro, respondToAnswer, showMentorMessage };
})();
